#version 450
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_scalar_block_layout : require

#if defined(DERIVATIVE_GROUP_QUAD)
#extension GL_NV_compute_shader_derivatives : require
layout(derivative_group_quadsNV, local_size_x = TILE_SIZE, local_size_y = TILE_SIZE) in;
#elif defined(DERIVATIVE_GROUP_LINEAR)
#extension GL_NV_compute_shader_derivatives : require
layout(derivative_group_linearNV, local_size_x = TILE_SIZE_SQUARE) in;
#elif SUBGROUP
#extension GL_KHR_shader_subgroup_shuffle : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
layout(local_size_x = TILE_SIZE_SQUARE) in;
#else
layout(local_size_x = TILE_SIZE_SQUARE) in;
#endif

#include "combiner.h"

#define RENDER_STATE_INDEX_BUFFER 6
#define RENDER_STATE_BUFFER 7
#include "render_state.h"

#define PRIMITIVE_SETUP_POS_BUFFER 4
#define PRIMITIVE_SETUP_ATTR_BUFFER 5
#include "rasterizer_helpers.h"

struct TileRasterWork
{
   uint16_t x, y, instance, prim;
};

layout(std430, set = 0, binding = 0) readonly buffer WorkList
{
    TileRasterWork tile_raster_work[];
};

struct ColorTile
{
    u8vec4 color[TILE_HEIGHT * TILE_WIDTH];
};

struct DepthTile
{
    uint16_t depth[TILE_HEIGHT * TILE_WIDTH];
};

struct FlagTile
{
    uint8_t flag[TILE_HEIGHT * TILE_WIDTH];
};

layout(std430, set = 0, binding = 1) writeonly buffer Color
{
    ColorTile color_tiles[];
};

layout(std430, set = 0, binding = 2) writeonly buffer Depth
{
    DepthTile depth_tiles[];
};

layout(std430, set = 0, binding = 3) writeonly buffer Flags
{
    FlagTile flag_tiles[];
};

#if !SUBGROUP && !defined(DERIVATIVE_GROUP_LINEAR) && !defined(DERIVATIVE_GROUP_QUAD)
shared float shared_u[gl_WorkGroupSize.x];
shared float shared_v[gl_WorkGroupSize.x];
#endif

void main()
{
    uint work_instance = gl_WorkGroupID.x;

    uint tile_x = uint(tile_raster_work[work_instance].x);
    uint tile_y = uint(tile_raster_work[work_instance].y);
    uint tile_instance_index = uint(tile_raster_work[work_instance].instance);
    uint primitive_index = uint(tile_raster_work[work_instance].prim);

#if defined(DERIVATIVE_GROUP_QUAD)
    uint local_index = gl_LocalInvocationIndex;
#elif defined(DERIVATIVE_GROUP_LINEAR)
    uint local_index = gl_LocalInvocationIndex;
#elif SUBGROUP
    uint local_index = gl_SubgroupInvocationID + gl_SubgroupID * gl_SubgroupSize;
#else
    uint local_index = gl_LocalInvocationIndex;
#endif

#ifdef DERIVATIVE_GROUP_QUAD
    uint local_pixel = local_index;
    int x = int(tile_x * uint(TILE_WIDTH) + gl_LocalInvocationID.x);
    int y = int(tile_y * uint(TILE_HEIGHT) + gl_LocalInvocationID.y);
#else
    uint quad_index = local_index >> 2u;
    uint quad_x = quad_index % (TILE_SIZE >> 1u);
    uint quad_y = quad_index / (TILE_SIZE >> 1u);

    uint local_x = quad_x * 2u + (local_index & 1u);
    uint local_y = quad_y * 2u + ((local_index >> 1u) & 1u);
    uint local_pixel = local_x + local_y * TILE_WIDTH;

    int x = int(tile_x * uint(TILE_WIDTH) + local_x);
    int y = int(tile_y * uint(TILE_HEIGHT) + local_y);
#endif

    ivec2 interpolation_base = get_interpolation_base(primitive_index);
    vec3 bary = interpolate_barycentrics(primitive_index, x, y, interpolation_base);
    vec2 f_uv = interpolate_uv(primitive_index, bary);

#if defined(DERIVATIVE_GROUP_LINEAR) || defined(DERIVATIVE_GROUP_QUAD)
    vec2 f_width_2 = fwidth(f_uv);
    float f_width = max(f_width_2.x, f_width_2.y);
#elif SUBGROUP
    vec2 f_uv_horiz = subgroupShuffleXor(f_uv, 1);
    vec2 f_uv_vert = subgroupShuffleXor(f_uv, 2);
#else
    shared_u[local_index] = f_uv.x;
    shared_v[local_index] = f_uv.y;
    barrier();
#endif

    bool has_coverage = test_coverage_single(primitive_index, x, y);
    if (!has_coverage)
    {
        flag_tiles[tile_instance_index].flag[local_pixel] = uint8_t(0);
        return;
    }

    uint variant = uint(render_state_indices[primitive_index]);
    uint combiner_state = uint(render_states[variant].combiner_state);

    uvec4 tex = uvec4(0);
    if ((combiner_state & COMBINER_SAMPLE_BIT) != 0u)
    {
#if SUBGROUP
        float dudx = abs(f_uv_horiz.x - f_uv.x);
        float dudy = abs(f_uv_vert.x - f_uv.x);
        float dvdx = abs(f_uv_horiz.y - f_uv.y);
        float dvdy = abs(f_uv_vert.y - f_uv.y);
        float f_width = max(dudx + dudy, dvdx + dvdy);
#elif !defined(DERIVATIVE_GROUP_LINEAR) && !defined(DERIVATIVE_GROUP_QUAD)
        float dudx = abs(shared_u[local_index ^ 1u] - f_uv.x);
        float dudy = abs(shared_u[local_index ^ 2u] - f_uv.x);
        float dvdx = abs(shared_v[local_index ^ 1u] - f_uv.y);
        float dvdy = abs(shared_v[local_index ^ 2u] - f_uv.y);
        float f_width = max(dudx + dudy, dvdx + dvdy);
#endif

        f_width = max(f_width, 1.0);
        float f_lod = log2(f_width);
        tex = sample_texture(render_variant, f_uv, f_lod);
    }

    uint alpha = uint(round(255.0 * clamp(tex.a, 0.0, 1.0)));
    if (alpha < uint(render_states[variant].alpha_threshold))
    {
        flag_tiles[tile_instance_index].flag[local_pixel] = uint8_t(0);
        return;
    }

    // We've passed the rasterization test. Interpolate colors, Z, 1/W.
    vec4 rgba = interpolate_rgba(primitive_index, bary);
    rgba = clamp(rgba, 0.0, 255.0);
    uvec4 urgba = uvec4(round(rgba));
    urgba = combine_result(tex, urgba, uvec4(render_states[variant].constant_color), combiner_state);

    uint z = interpolate_z(primitive_index, x, y, interpolation_base);

    color_tiles[tile_instance_index].color[local_pixel] = u8vec4(urgba);
    depth_tiles[tile_instance_index].depth[local_pixel] = uint16_t(z);
    flag_tiles[tile_instance_index].flag[local_pixel] = uint8_t(1);
}
