#version 450
layout(local_size_x = 64) in;
#include "constants.h"
#include "fb_info.h"

layout(set = 0, binding = 0, std430) readonly buffer Mask
{
    uint mask[];
};

layout(set = 0, binding = 1, std430) writeonly buffer CoarseMask
{
    uint coarse_mask[];
};

shared uint merged_mask[2];

void main()
{
    ivec2 tile = ivec2(gl_WorkGroupID.yz);
    int linear_tile = tile.y * MAX_TILES_X + tile.x;
    uint binned_bitmask_offset = uint(linear_tile * TILE_BINNING_STRIDE);

    uint mask_index = gl_GlobalInvocationID.x;
    bool has_mask = false;
    if (mask_index < fb_info.primitive_count_32)
        has_mask = mask[binned_bitmask_offset + mask_index] != 0u;

    // TODO: Subgroup ballot would be much nicer here.
    uint local_index = gl_LocalInvocationIndex;
    if (local_index < 2u)
        merged_mask[local_index] = 0u;
    barrier();

    uint bit_index = local_index & 31u;
    uint uint_index = local_index >> 5u;
    if (has_mask)
        atomicOr(merged_mask[uint_index], 1u << bit_index);

    barrier();

    if (local_index < 2u)
    {
        uint binned_bitmask_offset_coarse = uint(TILE_BINNING_STRIDE_COARSE * linear_tile);
        coarse_mask[binned_bitmask_offset_coarse + (gl_WorkGroupID.x << 1u) + local_index] = merged_mask[local_index];
    }
}