#version 450

// Consumes result from binning_low_res.comp, bins at a finer resolution (8x8 or 16x16 blocks).

#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_scalar_block_layout : require

#if SUBGROUP
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_vote : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_arithmetic : require
layout(local_size_x_id = 0) in;
#else
// Reasonble default. For AMD (64 threads), subgroups are definitely supported, so this won't be hit.
layout(local_size_x = 32) in;
#endif

layout(std430, set = 0, binding = 0) writeonly buffer TileBitmask
{
    uint binned_bitmask[];
};

#define RENDER_STATE_INDEX_BUFFER 4
#define RENDER_STATE_BUFFER 5
#include "render_state.h"

#define PRIMITIVE_SETUP_POS_BUFFER 1
#include "rasterizer_helpers.h"

layout(std430, set = 0, binding = 2) readonly buffer TileBitmaskLowRes
{
    uint binned_bitmask_low_res[];
};

layout(std430, set = 0, binding = 3) writeonly buffer TileBitmaskCoarse
{
    uint binned_bitmask_coarse[];
};

#if !UBERSHADER
layout(std430, set = 0, binding = 6) writeonly buffer TileInstanceOffset
{
    uint16_t tile_instance_offset[];
};

layout(std430, set = 0, binding = 7) buffer IndirectBuffer
{
    uvec4 item_counts_per_variant[];
};

// This can actually be uint16_t, but AMD doesn't seem to support loading uint16_t in SMEM unit,
// the memory traffic for this data structure is not relevant anyways.
struct TileRasterWork
{
    uint tile_x, tile_y;
    uint tile_instance;
    uint primitive;
};

layout(std430, set = 0, binding = 8) writeonly buffer WorkList
{
    uvec4 tile_raster_work[];
};

layout(std430, set = 0, binding = 9) readonly buffer StateIndex
{
    uint8_t state_indices[];
};
#endif

#if !SUBGROUP
shared uint merged_mask;
#endif

#if !UBERSHADER
uint allocate_work_offset(uint variant_index)
{
#if !SUBGROUP
    return atomicAdd(item_counts_per_variant[variant_index].x, 1u);
#else
    // Merge atomic operations.
    // XXX: This is kinda sketchy, and almost all shader compilers fail on a slightly different implementation of this loop.
    bool work_to_do = true;
    uint res;
    do
    {
        if (subgroupBroadcastFirst(variant_index) == variant_index)
        {
            uvec4 active_mask = subgroupBallot(true);
            uint count = subgroupBallotBitCount(active_mask);
            uint work_offset = 0u;
            if (subgroupElect())
                work_offset = atomicAdd(item_counts_per_variant[variant_index].x, count);

            work_offset = subgroupBroadcastFirst(work_offset);
            work_offset += subgroupBallotExclusiveBitCount(active_mask);
            res = work_offset;
            work_to_do = false;
        }
    } while(work_to_do);
    return res;
#endif
}
#endif

void main()
{
    ivec2 tile = ivec2(gl_WorkGroupID.yz);
    ivec2 base_coord = tile * ivec2(TILE_WIDTH, TILE_HEIGHT);
    ivec2 end_coord = min(base_coord + ivec2(TILE_WIDTH, TILE_HEIGHT), ivec2(fb_info.resolution));

    int linear_tile = tile.y * MAX_TILES_X + tile.x;
#if SUBGROUP
    // Spec is unclear how gl_LocalInvocationIndex is mapped to gl_SubgroupInvocationID, so synthesize our own.
    // We know the subgroups are fully occupied with VK_EXT_subgroup_size_control already.
    uint local_index = gl_SubgroupInvocationID;
    int mask_index = int(gl_SubgroupInvocationID + gl_SubgroupID * gl_SubgroupSize + gl_WorkGroupID.x * gl_WorkGroupSize.x);
#else
    uint local_index = gl_LocalInvocationIndex;
    int mask_index = int(gl_GlobalInvocationID.x);
#endif

    bool group_bin_to_tile = false;
    uint binned = 0u;
    if (mask_index < fb_info.primitive_count_32)
    {
        int linear_tile_lowres = (tile.y >> TILE_DOWNSAMPLE_LOG2) * MAX_TILES_X_LOW_RES + (tile.x >> TILE_DOWNSAMPLE_LOG2);
        int binned_bitmask_offset = linear_tile_lowres * TILE_BINNING_STRIDE + mask_index;

        // Each threads works on 32 primitives at once. Most likely, we'll only loop a few times here
        // due to low-res prepass binning having completed before.
        uint low_res_binned = binned_bitmask_low_res[binned_bitmask_offset];
        while (low_res_binned != 0u)
        {
            int i = findLSB(low_res_binned);
            low_res_binned &= ~uint(1 << i);

            int primitive_index = i + mask_index * 32;
            if (bin_primitive(uint(primitive_index), base_coord, end_coord))
                binned |= 1u << uint(i);
        }

        binned_bitmask[linear_tile * TILE_BINNING_STRIDE + mask_index] = binned;
        group_bin_to_tile = binned != 0u;
    }

    // Now, we reduce the group_bin_to_tile to a single u32 bitmask which is used as the highest level
    // bitmap which we can loop over.

#if SUBGROUP
    uvec4 ballot_result = subgroupBallot(group_bin_to_tile);

#if !UBERSHADER
    uint bit_count = uint(bitCount(binned));
    uint instance_offset = 0u;
    if (subgroupAny(bit_count != 0u))
    {
        // Allocate tile instance space for all threads in subgroup in one go.
        uint total_bit_count = subgroupAdd(bit_count);

        if (subgroupElect())
            if (total_bit_count != 0u)
                instance_offset = atomicAdd(item_counts_per_variant[0].w, total_bit_count);

        instance_offset = subgroupBroadcastFirst(instance_offset);
        instance_offset += subgroupInclusiveAdd(bit_count) - bit_count;
    }
#endif

    if (subgroupElect())
    {
        uint binned_bitmask_offset = uint(TILE_BINNING_STRIDE_COARSE * linear_tile);
        // gl_SubgroupSize of 128 is a theoretical thing, but no GPU does that ...
        if (gl_SubgroupSize == 64u)
        {
            binned_bitmask_coarse[binned_bitmask_offset + 2u * gl_WorkGroupID.x] = ballot_result.x;
            binned_bitmask_coarse[binned_bitmask_offset + 2u * gl_WorkGroupID.x + 1u] = ballot_result.y;
        }
        else if (gl_SubgroupSize == 32u)
        {
            binned_bitmask_coarse[binned_bitmask_offset + gl_SubgroupID + (gl_WorkGroupSize.x / 32u) * gl_WorkGroupID.x] = ballot_result.x;
        }
    }
#else
    if (local_index == 0u)
        merged_mask = 0u;
    barrier();

    if (group_bin_to_tile)
        atomicOr(merged_mask, 1u << local_index);

    barrier();

    if (local_index == 0u)
    {
        uint binned_bitmask_offset = uint(TILE_BINNING_STRIDE_COARSE * linear_tile);
        binned_bitmask_coarse[binned_bitmask_offset + gl_WorkGroupID.x] = merged_mask;
    }

#if !UBERSHADER
    uint bit_count = uint(bitCount(binned));
    uint instance_offset = 0u;
    if (bit_count != 0u)
        instance_offset = atomicAdd(item_counts_per_variant[0].w, bit_count);
#endif
#endif

#if !UBERSHADER
    // Distribute shading work.
    if (bit_count != 0u)
        tile_instance_offset[linear_tile * TILE_BINNING_STRIDE + mask_index] = uint16_t(instance_offset);

    while (binned != 0u)
    {
        int i = findLSB(binned);
        binned &= ~uint(1 << i);
        int primitive_index = i + mask_index * 32;
        uint variant_index = uint(state_indices[primitive_index]);

        uint work_offset = allocate_work_offset(variant_index);
        tile_raster_work[work_offset + uint(TILE_INSTANCE_STRIDE) * variant_index] =
            uvec4(uvec4(tile.x, tile.y, instance_offset, primitive_index));
        instance_offset++;
    }
#endif
}
