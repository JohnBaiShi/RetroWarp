#version 450
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_scalar_block_layout : require
layout(local_size_x = TILE_SIZE, local_size_y = TILE_SIZE) in;

#include "constants.h"
#include "fb_info.h"

#define RENDER_STATE_INDEX_BUFFER 7
#define RENDER_STATE_BUFFER 8
#include "rop.h"

layout(std430, set = 0, binding = 0) buffer VRAM
{
    uint16_t vram_data[];
};

layout(std430, set = 0, binding = 1) readonly buffer Binning
{
    uint binning_bitmask[];
};

layout(std430, set = 0, binding = 2) readonly buffer CoarseBinning
{
    uint coarse_binning_bitmask[];
};

struct ColorTile
{
    u8vec4 color[TILE_HEIGHT * TILE_WIDTH];
};

struct DepthTile
{
    uint16_t depth[TILE_HEIGHT * TILE_WIDTH];
};

struct FlagTile
{
    uint8_t flag[TILE_HEIGHT * TILE_WIDTH];
};

layout(std430, set = 0, binding = 3) readonly buffer Color
{
    ColorTile color_tiles[];
};

layout(std430, set = 0, binding = 4) readonly buffer Depth
{
    DepthTile depth_tiles[];
};

layout(std430, set = 0, binding = 5) readonly buffer Flags
{
    FlagTile flag_tiles[];
};

layout(std430, set = 0, binding = 6) readonly buffer TileOffsets
{
    uint16_t tile_offsets[];
};

void main()
{
    uvec2 coord = gl_GlobalInvocationID.xy;
    int x = int(coord.x);
    int y = int(coord.y);
    int pixel_index_color = (x + y * fb_info.color_stride + fb_info.color_offset) & ((VRAM_SIZE >> 1) - 1);
    int pixel_index_depth = (x + y * fb_info.depth_stride + fb_info.depth_offset) & ((VRAM_SIZE >> 1) - 1);

    if (all(lessThan(coord, uvec2(fb_info.color_width, fb_info.color_height))))
        set_initial_rop_color(uint(vram_data[pixel_index_color]));
    if (all(lessThan(coord, uvec2(fb_info.depth_width, fb_info.depth_height))))
        set_initial_rop_depth(uint(vram_data[pixel_index_depth]));

    ivec2 tile = ivec2(gl_WorkGroupID.xy);
    int linear_tile = tile.x + tile.y * MAX_TILES_X;
    int linear_tile_base = linear_tile * TILE_BINNING_STRIDE;
    int linear_tile_base_coarse = linear_tile * TILE_BINNING_STRIDE_COARSE;

    int primitive_mask_count = fb_info.primitive_count_32;
    int primitive_coarse_mask_count = fb_info.primitive_count_1024;

    for (int coarse_mask_index = 0; coarse_mask_index < primitive_coarse_mask_count; coarse_mask_index++)
    {
        uint coarse_binned = coarse_binning_bitmask[linear_tile_base_coarse + coarse_mask_index];
        while (coarse_binned != 0u)
        {
            int mask_index = findLSB(coarse_binned);
            coarse_binned &= ~uint(1 << mask_index);
            mask_index += coarse_mask_index * 32;
            uint binned = binning_bitmask[linear_tile_base + mask_index];
            uint tile_instance = uint(tile_offsets[linear_tile_base + mask_index]);

            while (binned != 0u)
            {
                int i = findLSB(binned);
                binned &= ~uint(1 << i);

                uint flags = uint(flag_tiles[tile_instance].flag[gl_LocalInvocationIndex]);
                if (flags != 0u)
                {
                    uint variant = get_rop_state_variant(mask_index * 32 + i);
                    uint z = uint(depth_tiles[tile_instance].depth[gl_LocalInvocationIndex]);
                    if (rop_depth_test(z, variant))
                        rop_blend(uvec4(color_tiles[tile_instance].color[gl_LocalInvocationIndex]), variant, x, y);
                }

                tile_instance++;
            }
        }
    }

    if (all(lessThan(coord, uvec2(fb_info.color_width, fb_info.color_height))))
        if (get_rop_dirty_color())
            vram_data[pixel_index_color] = uint16_t(get_current_color());

    if (all(lessThan(coord, uvec2(fb_info.depth_width, fb_info.depth_height))))
        if (get_rop_dirty_depth())
            vram_data[pixel_index_depth] = uint16_t(get_current_depth());
}
