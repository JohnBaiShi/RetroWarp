#version 450
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_scalar_block_layout : require

#if SUBGROUP
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
layout(local_size_x_id = 0) in;
#else
layout(local_size_x = 32) in;
#endif

#if !SUBGROUP
shared uint merged_mask;
#endif

layout(std430, set = 0, binding = 0) writeonly buffer TileBitmask
{
    uint binned_bitmask[];
};

#define RENDER_STATE_INDEX_BUFFER 2
#define RENDER_STATE_BUFFER 3
#include "render_state.h"

#define PRIMITIVE_SETUP_POS_BUFFER 1
#include "rasterizer_helpers.h"

void main()
{
    ivec2 tile = ivec2(gl_WorkGroupID.yz);
    ivec2 base_coord = tile * ivec2(TILE_WIDTH * 16, TILE_HEIGHT * 16);
    ivec2 end_coord = min(base_coord + ivec2(TILE_WIDTH * 16, TILE_HEIGHT * 16), ivec2(fb_info.resolution));

    int primitive_index = int(gl_GlobalInvocationID.x);

#if SUBGROUP
    uint local_index = gl_SubgroupInvocationID;
#else
    uint local_index = gl_LocalInvocationIndex;
#endif

    bool bin_to_tile = false;
    if (primitive_index < fb_info.primitive_count)
        bin_to_tile = bin_primitive(uint(primitive_index), base_coord, end_coord);

#if SUBGROUP
    uvec4 ballot_result = subgroupBallot(bin_to_tile);
    if (subgroupElect())
    {
        int linear_tile = tile.y * MAX_TILES_X_LOW_RES + tile.x;
        uint binned_bitmask_offset = uint(TILE_BINNING_STRIDE * linear_tile);
        if (gl_SubgroupSize == 64u)
        {
            binned_bitmask[binned_bitmask_offset + 2u * gl_WorkGroupID.x] = ballot_result.x;
            binned_bitmask[binned_bitmask_offset + 2u * gl_WorkGroupID.x + 1u] = ballot_result.y;
        }
        else if (gl_SubgroupSize == 32u)
        {
            binned_bitmask[binned_bitmask_offset + gl_WorkGroupID.x] = ballot_result.x;
        }
    }
#else
    // TODO: Subgroup ballot would be much nicer here.
    if (local_index == 0u)
        merged_mask = 0u;
    barrier();

    if (bin_to_tile)
    atomicOr(merged_mask, 1u << local_index);

    barrier();

    if (local_index == 0u)
    {
        int linear_tile = tile.y * MAX_TILES_X_LOW_RES + tile.x;
        uint binned_bitmask_offset = uint(TILE_BINNING_STRIDE * linear_tile);
        binned_bitmask[binned_bitmask_offset + gl_WorkGroupID.x] = merged_mask;
    }
#endif
}
